// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketCenter.Data;

#nullable disable

namespace TicketCenter.Migrations
{
    [DbContext(typeof(TicketCenterDbContext))]
    [Migration("20220729035025_initital")]
    partial class initital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TicketCenter.Data.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Application_Id");

                    b.ToTable("Application", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SectionDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("UpdatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Section_Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Section", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId")
                        .HasName("PK_Ticket_TicketId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SectionId");

                    b.ToTable("Tickets", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketInteraction", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByLogon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId", "CreatedOnUtc");

                    b.ToTable("TicketInteractions", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Section", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.Application", "Application")
                        .WithMany("Sections")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Section_Application_ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Ticket", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.Application", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("TicketCenter.Data.Models.Section", "Section")
                        .WithMany("Tickets")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Section_SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketInteraction", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.Ticket", "Ticket")
                        .WithMany("TicketInteractions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketInteraction_Ticket_TicketId");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Application", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Section", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.Ticket", b =>
                {
                    b.Navigation("TicketInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
