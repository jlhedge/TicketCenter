// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketCenter.Data;

#nullable disable

namespace TicketCenter.Migrations
{
    [DbContext(typeof(dbContext))]
    partial class dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.App", b =>
                {
                    b.Property<Guid>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("AppId")
                        .HasName("PK_Application_Id");

                    b.ToTable("Applications", "ApplicationAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Page", b =>
                {
                    b.Property<Guid>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PageDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("PageId")
                        .HasName("PK_Pages_PageId");

                    b.HasIndex("AppId");

                    b.ToTable("Pages", "ApplicationAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("SectionId")
                        .HasName("PK_Sections_SectionId");

                    b.HasIndex("PageId");

                    b.ToTable("Sections", "ApplicationAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Subsection", b =>
                {
                    b.Property<Guid>("SubsectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubsectionDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("SubsectionName")
                        .IsRequired()
                        .HasMaxLength(77)
                        .HasColumnType("nvarchar(77)");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("SubsectionId")
                        .HasName("PK_Subsections_SubsectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SubSections", "ApplicationAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenter.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("StatusTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketId")
                        .HasName("PK_Ticket_Id");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("Tickets", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenter.TicketInteraction", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketId", "CreatedOnUtc")
                        .HasName("PK_TicketInteractions_TicketId_CreatedOnUtc");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("TicketInteractions", "TicketCenter");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.RequestType", b =>
                {
                    b.Property<long>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestTypeId"), 1L, 1);

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestTypeId")
                        .HasName("PK_RequestType_Id");

                    b.HasIndex("SubSectionId");

                    b.ToTable("RequestTypes", "TicketCenterAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.StatusType", b =>
                {
                    b.Property<long>("StatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StatusTypeId"), 1L, 1);

                    b.Property<string>("CreatedByLogon")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("RequestTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedByLogon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("StatusTypeId")
                        .HasName("PK_Status_StatusTypeId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("StatuseTypes", "TicketCenterAdmin");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Page", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.ApplicationAdmin.App", "App")
                        .WithMany("Pages")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pages_Applications_ApplicationId");

                    b.Navigation("App");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Section", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.ApplicationAdmin.Page", "Page")
                        .WithMany("Sections")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sections_Pages_PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Subsection", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.ApplicationAdmin.Section", "Section")
                        .WithMany("Subsections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subsections_Sections_SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenter.Ticket", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.TicketCenterAdmin.StatusType", "StatusType")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Statuses_StatusId");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenter.TicketInteraction", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.TicketCenterAdmin.StatusType", "StatusType")
                        .WithMany("TicketInteractions")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketInteractions_Status_StatusId");

                    b.HasOne("TicketCenter.Data.Models.TicketCenter.Ticket", "Ticket")
                        .WithMany("TicketInteractions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TicketInteractions_Tickets_TicketId");

                    b.Navigation("StatusType");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.RequestType", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.ApplicationAdmin.Subsection", "Subsection")
                        .WithMany("RequestTypes")
                        .HasForeignKey("SubSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestTypes_Subsections_SubsectionId");

                    b.Navigation("Subsection");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.StatusType", b =>
                {
                    b.HasOne("TicketCenter.Data.Models.TicketCenterAdmin.RequestType", "RequestType")
                        .WithMany("StatusTypes")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Statuses_RequestTypes_RequestTypeId");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.App", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Page", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Section", b =>
                {
                    b.Navigation("Subsections");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.ApplicationAdmin.Subsection", b =>
                {
                    b.Navigation("RequestTypes");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenter.Ticket", b =>
                {
                    b.Navigation("TicketInteractions");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.RequestType", b =>
                {
                    b.Navigation("StatusTypes");
                });

            modelBuilder.Entity("TicketCenter.Data.Models.TicketCenterAdmin.StatusType", b =>
                {
                    b.Navigation("TicketInteractions");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
